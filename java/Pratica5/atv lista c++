#include <iostream>

struct Node {
    int data;
    Node* next;
};

class SinglyLinkedList {
public:
    Node* head;

    SinglyLinkedList() : head(nullptr) {}

    // a) Mostra o primeiro elemento da lista
    void showFirstElement() {
        if (head)
            std::cout << "First element: " << head->data << std::endl;
        else
            std::cout << "List is empty!" << std::endl;
    }

    // b) Mostra o último elemento da lista
    void showLastElement() {
        if (!head) {
            std::cout << "List is empty!" << std::endl;
            return;
        }
        Node* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        std::cout << "Last element: " << temp->data << std::endl;
    }

    // c) Mostra os elementos que sucedem um determinado elemento
    void showSuccessors(int value) {
        Node* temp = head;
        while (temp && temp->data != value) {
            temp = temp->next;
        }
        if (temp && temp->next) {
            std::cout << "Elements after " << value << ": ";
            temp = temp->next;
            while (temp) {
                std::cout << temp->data << " ";
                temp = temp->next;
            }
            std::cout << std::endl;
        } else {
            std::cout << "No successors found for " << value << std::endl;
        }
    }

    // d) Conta quantos elementos existem na lista
    int countElements() {
        int count = 0;
        Node* temp = head;
        while (temp) {
            count++;
            temp = temp->next;
        }
        return count;
    }

    // e) Inclui um elemento na lista
    void insertElement(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = head;
        head = newNode;
    }

    // f) Exclui um elemento da lista
    void deleteElement(int value) {
        if (!head) return;
        if (head->data == value) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }
        Node* temp = head;
        while (temp->next && temp->next->data != value) {
            temp = temp->next;
        }
        if (temp->next) {
            Node* nodeToDelete = temp->next;
            temp->next = temp->next->next;
            delete nodeToDelete;
        }
    }

    // Função auxiliar para mostrar a lista
    void printList() {
        Node* temp = head;
        while (temp) {
            std::cout << temp->data << " ";
            temp = temp->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    SinglyLinkedList list;
    
    list.insertElement(10);
    list.insertElement(20);
    list.insertElement(30);
    list.insertElement(40);
    
    list.printList();
    list.showFirstElement();
    list.showLastElement();
    list.showSuccessors(20);
    std::cout << "Number of elements: " << list.countElements() << std::endl;
    
    list.deleteElement(20);
    list.printList();

    return 0;
}